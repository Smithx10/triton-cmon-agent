/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
/*
 * Copyright (c) 2018, Joyent, Inc.
 */
'use strict';

var mod_assert = require('assert-plus');
var mod_bunyan = require('bunyan');
var mod_forkexec = require('forkexec');
var mod_netconf = require('triton-netconfig');
var mod_restify = require('restify');
var mod_vasync = require('vasync');
var fmt = require('util').format;


var App = require('../lib/app');
var VError = require('verror').VError;
var tritonConfig = require('../lib/triton-config');

var DEFAULT_CONFIG = {
    logLevel: 'debug',
    port: 9163
};

var log = mod_bunyan.createLogger({
    name: 'cmon-agent',
    serializers: mod_restify.bunyan.serializers
});

function loadConfig(cb) {
    mod_assert.func(cb, 'cb');

    var config = DEFAULT_CONFIG;

    mod_forkexec.forkExecWait({
        argv: ['/usr/bin/bash', '/lib/sdc/config.sh', '-json']
    }, function _onForkWaited(err, info) {
        if (err) {
            return cb(err);
        }

        try {
            config.ufdsAdminUuid = JSON.parse(info.stdout)
                .ufds_admin_uuid;
            cb(null, config);
        } catch (parseErr) {
            cb(new VError(parseErr, 'could not parse sdc config'));
        }
    });
}

function main() {
    mod_vasync.pipeline({
        arg: {},
        funcs: [
            function getConfigAndSetupLogging(arg, next) {
                loadConfig(function _loadedConfig(err, config) {
                    if (err) {
                        next(err);
                        return;
                    }

                    arg.config = config;
                    if (config.logLevel) {
                        log.level(config.logLevel);
                    }
                    if (log.level() <= mod_bunyan.TRACE) {
                        log.src = true;
                    }

                    log.debug({
                        config: arg.config
                    }, 'loaded config');
                    next();
                });
            },
            function getSysinfo(arg, next) {
                tritonConfig.sysinfo(function _loadedSysinfo(err, sysinfoObj) {
                    if (err) {
                        next(new VError(err, 'fetching sysinfo'));
                        return;
                    }

                    arg.sysinfo = sysinfoObj;
                    next();
                });
            },
            function createAndStartApp(arg, next) {
                var ip = firstAdminIp(arg.sysinfo);
                var app = new App({
                    config: arg.config,
                    log: log,
                    ip: ip,
                    sysinfo: arg.sysinfo
                });
                app.start(next);
            }

        ]
    }, function _mainPipelineCb(err) {
        if (err) {
            log.error(err, 'error starting up');
            process.exitCode = 2;
        } else {
            log.info('startup complete');
        }
    });

}

function firstAdminIp(sysinfo) {
    var ip = mod_netconf.adminIpFromSysinfo(sysinfo);

    if (!ip) {
        throw new Error(fmt('No admin NICs detected.'));
    }

    return ip;
}

main();
