#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright (c) 2017, Joyent, Inc.
#

#
# Run the cmon-agent tests.
# Run `./runtests -h` for usage info.
#

if [ "$TRACE" != "" ]; then
    export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail



#---- guard

if [[ ! -f "/lib/sdc/.sdc-test-no-production-data" ]]; then
    cat <<EOF
To run this test you must create the file:

    /lib/sdc/.sdc-test-no-production-data

after ensuring you have no production data on this SDC.
EOF
    exit 2
fi



#---- config

NAME=cmon-agent
TOP=$(cd $(dirname $0)/../; pwd)



#---- support functions

function fatal
{
    echo "$(basename $0): fatal error: $*"
    exit 1
}

function usage
{
    echo "Usage:"
    echo "  runtests [OPTIONS...]"
    echo ""
    echo "Options:"
    echo "  -f FILTER   Filter pattern (substring match) for test files to run."
}



#---- mainline

start_time=$(date +%s)

# Options.
opt_test_pattern=
while getopts "hf:" opt
do
    case "$opt" in
        h)
            usage
            exit 0
            ;;
        f)
            opt_test_pattern=$OPTARG
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

OUTPUT_DIR=/var/tmp/${NAME}test
echo "# Create output dir ($OUTPUT_DIR)."
rm -rf $OUTPUT_DIR
mkdir -p $OUTPUT_DIR



#---- start tests

cd $TOP

test_files=$(ls -1 test/*.test.js)
if [[ -n "$opt_test_pattern" ]]; then
    test_files=$(echo "$test_files" | grep "$opt_test_pattern" || true)
    echo "# Running filtered set of test files: $test_files"
fi

failed_tests=0
failed_test_names=
NODE=node
set +o errexit
set -o pipefail
for t in ${test_files}; do
    if [ "global" == $(zonename) ]; then
        NODE=$TOP/node/bin/node
    fi
    echo "#"
    echo "# Running Test: ${t}"
    echo "#"
    ${NODE} ${t} \
        | tee -a $OUTPUT_DIR/cmon-agent.tap
    if [[ $? != 0 ]]; then
        failed_tests=$((${failed_tests} + 1))
        failed_test_names="${failed_test_names} ${t}"
    fi
done
set +o pipefail
set -o errexit

#---- summary

echo ""
echo "# test results:"

end_time=$(date +%s)
elapsed=$((${end_time} - ${start_time}))

tests=$(grep "^# tests [0-9]" $OUTPUT_DIR/*.tap | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
passed=$(grep "^# pass  [0-9]" $OUTPUT_DIR/*.tap | tr -s ' ' | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
[[ -z ${tests} ]] && tests=0
[[ -z ${passed} ]] && passed=0
fail=$((${tests} - ${passed}))

if [[ -t 1 ]]; then
    # We're on a terminal, so use color
    COLOR_GREEN="\033[32m"
    COLOR_RED="\033[31m"
    COLOR_ORANGE="\033[33m"
    COLOR_NORMAL="\033[39m"
else
    # no terminal, no color
    COLOR_GREEN=
    COLOR_RED=
    COLOR_ORANGE=
    COLOR_NORMAL=
fi

# Output the summary
echo "#"
echo "# TESTS COMPLETE IN ${elapsed} SECONDS, SUMMARY:"
echo "#"
echo -e "#   ${COLOR_GREEN}PASS: ${passed} / ${tests}${COLOR_NORMAL}"
if [[ ${fail} -gt 0 || ${failed_tests} -gt 0 ]]; then
    if [[ ${fail} -eq 0 ]]; then
        # tests failed, but no 'not ok' messages, so probably crashed
        fail="?"
    fi
    echo -e "#   ${COLOR_RED}FAIL: ${fail} / ${tests}${COLOR_NORMAL}"
    echo "#"
    echo "# FAILED TESTS:"
    echo "#"
    for t in ${failed_test_names}; do
        echo "#   - ${t}"
    done
fi
echo "#"

if [[ ${tests} != ${passed} ]]; then
    exit 1
fi
